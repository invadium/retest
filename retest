#!/bin/bash

# test state
FAILED=NO # a test suit failed flag

# === test config ===
# source data config
export RETEST_PATH=${RETEST_PATH:-"./test"}  # a path for test cases lookup
EXEC=${RETEST_EXEC:-"bash"}           # an interpreter for test execution
CASE=${RETEST_CASE_EXT:-"case"}       # a file extention for test cases
EXPECT=${RETEST_EXPECT_EXT:-"expect"} # a file extention for expected results

# env flags
LOCAL=NO

# output flags
HELP=NO
VERBOSE=NO
TRACE=NO
SOURCE=NO
MUTE=NO
STATS=NO

# stats
TESTS_FOUND=0
TESTS_RUN=0
TESTS_SUCCEDED=0
TESTS_FAILED=0

# parse and apply command line arguments
#for i in "$@"; do

while [[ $# -gt 0 ]]
do
    key="${1}"

    case ${key} in
        -h|--help)
        HELP=YES
        shift
        ;;
        -l|--local)
        LOCAL=YES
        shift
        ;;
        -v|--verbose)
        VERBOSE=YES
        shift
        ;;
        -t|--trace)
        TRACE=YES
        shift
        ;;
        -s|--source)
        SOURCE=YES
        shift
        ;;
        -a|--stats)
        STATS=YES
        shift
        ;;
        -m|--mute)
        MUTE=YES
        shift
        ;;
        -p|--path)
        RETEST_PATH="${2}"
        shift
        shift
        ;;
        -c|--case)
        CASE="${2}"
        shift
        shift
        ;;
        -x|--exec)
        EXEC="${2}"
        shift
        shift
        ;;
        -e|--expect)
        EXPECT="${2}"
        shift
        shift
        ;;
        *)
        shift
        ;;
    esac
done

# === help ===
if [ $HELP == 'YES' ]; then
    echo 'reTest - a minimalistic bash-powered test anti-framework'
    echo '    searches and evaluates all *.case files in the ./test folder'
    echo '    shows only the FAILED tests by default'
    echo ''
    echo 'Usage: retest [OPTION]...'
    echo ''
    echo 'Example: ./retest -t -p test-suit.2 -c py -e'
    echo ''
    echo 'Available Options:'
    echo '    -p | --path    path to the test folder, "./test" by default'
    echo '    -l | --local   run tests from local folder'
    echo '    -x | --exec    an interpreter for test cases, "bash" by default'
    echo '    -c | --case    case files extention, "case" by default'
    echo '    -e | --expect  expected data file extention, "expect" by default'
    echo '    -v | --verbose show all test results'
    echo '    -t | --trace   show evaluation results'
    echo '    -s | --source  show test sources'
    echo '    -a | --stats   show test stats'
    echo '    -m | --mute    suppress final SUCCESS/FAILED message'
    exit 0
fi

# save base dir
baseDir=`pwd`

# === find and run all the tests === 
if [ $TRACE == 'YES' ]; then
    echo "=============================================="
    echo "reTest Order Tree:"
    find $RETEST_PATH -name "*.$CASE" | sort
    echo "=============================================="
fi
for f in $(find $RETEST_PATH -name "*.$CASE" | sort); do

    ((TESTS_FOUND++))
    test=${f%.$CASE}       # test case name with path included and extension excluded
    dir=`dirname $f`       # test case directory
    case=`basename $f`     # test case file name
    name=${case%.$CASE}    # pure test case name (no extension)
    expect=$name".$EXPECT" # derive an expected data file name from the name

    if [ $LOCAL == 'NO' ]; then
        # run the test
        if [ $TRACE == 'YES' ]; then
            echo "::$EXEC $f"
        fi
        val=`$EXEC $f`
        ((TESTS_RUN++))
    fi

    # set the test directory
    cd $dir

    if [ $LOCAL == 'YES' ]; then
        # run the test
        if [ $TRACE == 'YES' ]; then
            echo "::$EXEC $case"
        fi
        val=`$EXEC $case`
        ((TESTS_RUN++))
    fi

    if [ ! -f $expect ]; then
        echo "Missing [$test.$EXPECT] to match expected results"
        match='Missing Data'
    else
        match=`cat $expect`
    fi

    if [ "$val" == "$match" ]
    then
        ((TESTS_SUCCEDED++))
        if [ $VERBOSE == 'YES' ]; then
            echo "* $test - OK"
        fi
        if [ $SOURCE == 'YES' ]; then
            echo "=== $f ==="
            cat $case
        fi
        if [ $TRACE == 'YES' ]; then
            echo $val' == '$match
        fi
    else
        FAILED=YES
        ((TESTS_FAILED++))
        if [ $VERBOSE == 'YES' ]; then
            echo "* $test - FAILED ["
            echo "$val"
            echo "=============================="
            echo "$match"
            echo "]"
        fi
        if [ $SOURCE == 'YES' ]; then
            echo "=== $f ==="
            cat $case
        fi
        if [ $TRACE == 'YES' ]; then
            echo $val' == '$match
        fi
    fi

    # jump back to base
    cd $baseDir
done

if [ $STATS == 'YES' ]; then
    echo "====== reTest Stats ======"
    echo "Run:      $TESTS_RUN"
    echo "Succeded: $TESTS_SUCCEDED"
    echo "Failed:   $TESTS_FAILED"
    echo "=========================="
fi

if [ $FAILED == 'YES' ]; then
    if [ $VERBOSE == 'YES' ]; then
        echo 'FAILED - Test Suit completed with errors'
    else
        if [ $MUTE == 'NO' ]; then
            echo 'FAILED'
        fi
    fi
    exit 1
else
    if [ $MUTE == 'NO' ]; then
        echo 'SUCCESS'
    fi
    exit 0
fi
