#!/bin/bash

# test state
FAILED=NO # a test suit failed flag

# === test config ===
# source data config
RETEST_PATH=${RETEST_PATH:-"./test"} # a path for test lookup
EXEC=${RETEST_EXEC:-"bash"}          # an interpreter for test execution
CASE=${RETEST_CASE_EXT:-"case"}            # a file extention for test cases
EXPECT=${RETEST_EXPECT_EXT:-"expect"}    # a file extention for expected results
# output flags
HELP=NO
VERBOSE=NO
TRACE=NO
SOURCE=NO

# parse and apply command line arguments
for i in "$@"; do

case $i in
    -h|--help)
    HELP=YES
    ;;
    -v|--verbose)
    VERBOSE=YES
    ;;
    -t|--trace)
    TRACE=YES
    ;;
    -s|--source)
    SOURCE=YES
    ;;
    -p|--path)
    RETEST_PATH="${i#*=}"
    ;;
    -c|--case)
    CASE="${i#*=}"
    ;;
    -x|--exec)
    EXEC="${i#*=}"
    ;;
    -e|--expect)
    EXPECT="${i#*=}"
    ;;
    *)
    ;;
esac
done

# === help ===
if [ $HELP == 'YES' ]; then
    echo 'ReTest - a minimalistic bash-powered test framework'
    echo '    searches and evaluates all .case files in the test folder'
    echo '    shows only the FAILED tests by default'
    echo ''
    echo 'Usage: retest [OPTION]...'
    echo ''
    echo 'Example: ./retest -t -p test-suit.2 -c py -e'
    echo ''
    echo 'Available Options:'
    echo '    -p | --path    path to the test folder, "./test" by default'
    echo '    -x | --exec    an interpreter for test cases, "bash" by default'
    echo '    -c | --case    case files extention, "case" by default'
    echo '    -e | --expect  expected data file extention, "expect" by default'
    echo '    -v | --verbose show all test results'
    echo '    -t | --trace   show evaluation results'
    echo '    -s | --source  show test sources'
    exit 0
fi

# === find and run all the tests === 
for f in $(find $TESTPATH -name "*.$CASE"); do

dir=`dirname $f`
case=`basename $f`

test=${f%.$CASE}
base=${case%.$CASE}
expect=$base".$EXPECT"

# set test directory
cd $dir

val=`$EXEC $case`
match=`cat $expect`

if [ "$val" == "$match" ]
then
    if [ $VERBOSE == 'YES' ]; then
        echo $test' - OK'
    fi
    if [ $SOURCE == 'YES' ]; then
        cat $case
    fi
    if [ $TRACE == 'YES' ]; then
        echo $val' == '$match
    fi
else
    FAILED=YES
	if [ $VERBOSE == 'YES' ]; then
        echo "$test - FAILED ["
        echo "$val"
        echo "=============================="
        echo "$match"
        echo "]"
    fi
	if [ $SOURCE == 'YES' ]; then
		cat $case
	fi
	if [ $TRACE == 'YES' ]; then
	    echo $val' == '$match
	fi
fi
done

if [ $FAILED == 'YES' ]; then
    echo 'FAILED - Test Suit completed with errors'
    exit 1
else
	#if [ $VERBOSE == 'YES' ]; then
        echo 'SUCCESS'
    #fi
    exit 0
fi
